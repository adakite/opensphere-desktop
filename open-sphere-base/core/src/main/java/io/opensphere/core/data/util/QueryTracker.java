package io.opensphere.core.data.util;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.Future;

import org.apache.log4j.Logger;

import io.opensphere.core.cache.matcher.PropertyMatcher;

/**
 * A tracker for a query that can be used to get the status of the query or
 * cancel it.
 */
public interface QueryTracker extends Future<long[]>
{
    /**
     * Add a listener for query status changes.
     *
     * @param listener The listener.
     */
    void addListener(QueryTrackerListener listener);

    /**
     * Wait indefinitely for the query to complete.
     *
     * @return The ids generated by the query.
     */
    long[] awaitCompletion();

    /**
     * Get the exception if one was thrown during the query.
     *
     * @return The exception, or {@code null}.
     */
    Throwable getException();

    /**
     * Get the estimated progress toward completion. If the query is cancelled
     * or failed, the completion is 1.
     *
     * @return A number in the range [0, 1].
     */
    float getFractionComplete();

    /**
     * Get the ids that have been returned by the query so far.
     * <p>
     * <b>WARNING:</b> If a remote query runs using multiple threads, these ids
     * may not be in the same order that the matching values are provided to the
     * property value receiver.
     *
     * @return An array of ids.
     */
    long[] getIds();

    /**
     * Get the property matchers that go with this query, which may be more
     * restrictive than the ones in the {@link Query} object, due to the
     * satisfactions.
     *
     * @return The parameters.
     */
    List<? extends PropertyMatcher<?>> getParameters();

    /**
     * Get the query.
     *
     * @return The query.
     */
    Query getQuery();

    /**
     * Get the query status.
     *
     * @return The query status.
     */
    QueryStatus getQueryStatus();

    /**
     * Get the satisfactions that this tracker is responsible for.
     *
     * @return The satisfactions.
     */
    Collection<? extends Satisfaction> getSatisfactions();

    /**
     * Get if this is a local query.
     *
     * @return {@code true} if this is a local query.
     */
    boolean isLocal();

    /**
     * If an exception was thrown, send it to the logger.
     */
    void logException();

    /**
     * If an exception was thrown, send it to the logger.
     *
     * @param logger The logger to use.
     */
    void logException(Logger logger);

    /**
     * Removes a listener for query status changes.
     *
     * @param listener The listener to remove.
     */
    void removeListener(QueryTrackerListener listener);

    /** Enumeration of query statuses. */
    enum QueryStatus
    {
        /** The query has been cancelled. */
        CANCELLED,

        /** The query failed. */
        FAILED,

        /** The query is currently running. */
        RUNNING,

        /** The query has completed successfully. */
        SUCCESS,
    }

    /**
     * Listener for changes to query status.
     */
    public interface QueryTrackerListener
    {
        /**
         * Method called when a query's fraction complete changes.
         *
         * @param tracker The query tracker.
         * @param fractionComplete The new fraction complete.
         */
        void fractionCompleteChanged(QueryTracker tracker, float fractionComplete);

        /**
         * Method called when a query's status changes.
         *
         * @param tracker The query tracker.
         * @param status The new status.
         */
        void statusChanged(QueryTracker tracker, QueryStatus status);
    }
}
