package io.opensphere.feedback;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import io.opensphere.core.StatisticsManager;
import io.opensphere.core.Toolbox;
import io.opensphere.core.orwell.ApplicationStatistics;
import io.opensphere.core.orwell.GraphicsStatistics;
import io.opensphere.core.orwell.PluginStatistics;
import io.opensphere.core.orwell.SessionStatistics;
import io.opensphere.core.orwell.SystemStatistics;
import io.opensphere.core.orwell.UserStatistics;
import io.opensphere.core.preferences.Preferences;
import io.opensphere.core.util.awt.BrowserUtilities;
import io.opensphere.core.util.net.URLEncodingUtilities;
import io.opensphere.core.util.swing.SplitButton;

/**
 * The Class FeedbackManager.
 */
public class FeedbackManager
{
    /** The Constant PROVIDE_FEEDBACK. */
    public static final String PROVIDE_FEEDBACK = "Provide_Feedback";

    /** The Constant REPORT_BUG. */
    public static final String REPORT_BUG = "Report_Bug";

    /** The Constant REQUEST_FEATURE. */
    public static final String REQUEST_FEATURE = "Request_Feature";

    /** The Toolbox. */
    private Toolbox myToolbox;

    /** The preferences for map options. */
    private Preferences myPreferences;

    /**
     * Adds the menu items.
     *
     * @param toolbox the toolbox
     * @param button the button
     */
    public void addMenuItems(Toolbox toolbox, SplitButton button)
    {
        myToolbox = toolbox;
        myPreferences = myToolbox.getPreferencesRegistry().getPreferences(FeedbackManager.class);

        final String provideFeedbackStr = myPreferences.getString(PROVIDE_FEEDBACK, null);
        if (provideFeedbackStr != null)
        {
            final JMenuItem provideFeedbackItem = new JMenuItem("Provide Feedback");
            provideFeedbackItem.addActionListener(e -> transmit(provideFeedbackStr));
            button.addMenuItem(provideFeedbackItem);
        }

        final String reportBugString = myPreferences.getString(REPORT_BUG, null);
        if (reportBugString != null)
        {
            final JMenuItem reportbugItem = new JMenuItem("Report Bug");
            reportbugItem.addActionListener((e) -> transmit(reportBugString));
            button.addMenuItem(reportbugItem);
        }

        final String requestFeatureStr = myPreferences.getString(REQUEST_FEATURE, null);
        if (requestFeatureStr != null)
        {
            final JMenuItem requestFeatureItem = new JMenuItem("Request Feature");
            requestFeatureItem.addActionListener(e -> transmit(requestFeatureStr));
            button.addMenuItem(requestFeatureItem);
        }
    }

    /**
     * Generates a message report URL, and invokes the URL.
     *
     * @param pMessageBody the string generated by the user.
     */
    protected void transmit(final String pMessageBody)
    {
        final StringBuilder builder = new StringBuilder();
        builder.append(pMessageBody);
        builder.append(buildInformationString());

        openURL(builder.toString());
    }

    /**
     * Appends statistics from the statistics manager to a new String.
     *
     * @return A URL parameter string in which system statistics have been encoded.
     */
    protected String buildInformationString()
    {
        final StringBuilder builder = new StringBuilder();

        final StatisticsManager statisticsManager = myToolbox.getStatisticsManager();
        appendStatistics(builder, statisticsManager.getSystemStatistics());
        appendStatistics(builder, statisticsManager.getGraphicsStatistics());
        appendStatistics(builder, statisticsManager.getApplicationStatistics());
        appendStatistics(builder, statisticsManager.getSessionStatistics());
        appendStatistics(builder, statisticsManager.getUserStatistics());

        return builder.toString();
    }

    /**
     * Appends statistics from the supplied object to the supplied builder.
     *
     * @param pBuilder the string builder to which the information is appended.
     * @param pSystemStatistics the statistics to append.
     */
    protected void appendStatistics(StringBuilder pBuilder, SystemStatistics pSystemStatistics)
    {
        pBuilder.append("&osName=").append(pSystemStatistics.getOperatingSystemName());
        pBuilder.append("&osVersion=").append(pSystemStatistics.getOperatingSystemVersion());
        pBuilder.append("&osArch=").append(pSystemStatistics.getArchitecture());
        pBuilder.append("&procs=").append(pSystemStatistics.getAvailableProcessors());
        pBuilder.append("&jre=").append(pSystemStatistics.getSpecVersion());
        pBuilder.append("&vmVersion=").append(pSystemStatistics.getJavaVmVersion());
    }

    /**
     * Appends statistics from the supplied object to the supplied builder.
     *
     * @param pBuilder the string builder to which the information is appended.
     * @param pSystemStatistics the statistics to append.
     */
    protected void appendStatistics(StringBuilder pBuilder, GraphicsStatistics pSystemStatistics)
    {
        pBuilder.append("&glVendor=").append(pSystemStatistics.getGlVendor());
        pBuilder.append("&glVersion=").append(pSystemStatistics.getGlVersion());
        pBuilder.append("&glRenderer=").append(pSystemStatistics.getGlRenderer());
        pBuilder.append("&glName=").append(pSystemStatistics.getName());
        pBuilder.append("&glMemSize=").append(pSystemStatistics.getGpuMemorySizeBytes());
        pBuilder.append("&glCompShader=").append(pSystemStatistics.isGlCompileShaderAvailable());
    }

    /**
     * Appends statistics from the supplied object to the supplied builder.
     *
     * @param pBuilder the string builder to which the information is appended.
     * @param pSystemStatistics the statistics to append.
     */
    protected void appendStatistics(StringBuilder pBuilder, ApplicationStatistics pSystemStatistics)
    {
        pBuilder.append("&OpenSphereInstallDir=").append(pSystemStatistics.getInstallationLocation());
        pBuilder.append("&OpenSphereAppDir=").append(pSystemStatistics.getApplicationUserDirectory());
        pBuilder.append("&OpenSphereVersion=").append(pSystemStatistics.getVersion());

        final List<PluginStatistics> availablePlugins = pSystemStatistics.getAvailablePlugins();
        final StringBuilder plugins = new StringBuilder();
        for (final PluginStatistics pluginStatistics : availablePlugins)
        {
            plugins.append(",[");
            plugins.append(pluginStatistics.getName());
            if (pluginStatistics.getVersion() != null)
            {
                plugins.append("-");
                plugins.append(pluginStatistics.getVersion());
            }
            if (pluginStatistics.getAuthor() != null)
            {
                plugins.append("-");
                plugins.append(pluginStatistics.getAuthor());
            }
            plugins.append("]");
        }
        if (availablePlugins.size() > 0)
        {
            plugins.deleteCharAt(0);
        }

        pBuilder.append("&OpenSpherePlugins=").append(plugins);
    }

    /**
     * Appends statistics from the supplied object to the supplied builder.
     *
     * @param pBuilder the string builder to which the information is appended.
     * @param pSystemStatistics the statistics to append.
     */
    protected void appendStatistics(StringBuilder pBuilder, SessionStatistics pSystemStatistics)
    {
        /* intentionally blank */
    }

    /**
     * Appends statistics from the supplied object to the supplied builder.
     *
     * @param pBuilder the string builder to which the information is appended.
     * @param pSystemStatistics the statistics to append.
     */
    protected void appendStatistics(StringBuilder pBuilder, UserStatistics pSystemStatistics)
    {
        /* intentionally blank */
    }

    /**
     * Open url.
     *
     * @param url the url
     */
    protected void openURL(String url)
    {
        URL aURL;
        try
        {
            aURL = URLEncodingUtilities.encodeURL(new URL(url));
            BrowserUtilities.browse(aURL, myToolbox.getUIRegistry().getMainFrameProvider().get());
        }
        catch (final MalformedURLException e)
        {
            JOptionPane.showMessageDialog(myToolbox.getUIRegistry().getMainFrameProvider().get(),
                    "An error was encountered trying to create hyperlink", "Create Hyperlink Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
