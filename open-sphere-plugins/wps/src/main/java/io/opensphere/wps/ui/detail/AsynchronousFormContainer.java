package io.opensphere.wps.ui.detail;

import java.util.function.Consumer;
import java.util.function.Supplier;

import javafx.beans.property.ReadOnlyBooleanProperty;
import javafx.concurrent.Service;
import javafx.geometry.Insets;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;

import org.apache.log4j.Logger;

import io.opensphere.core.util.fx.FXUtilities;
import io.opensphere.core.util.fx.LabeledObservableButtonBar;

/**
 * A container in which a form is displayed. The container's form is populated using a JavaFX {@link Service}, which is started
 * upon container instantiation. While the service is running, a progress indicator is displayed in place of the form.
 */
public class AsynchronousFormContainer extends BorderPane
{
    /** Logger reference. */
    private static final Logger LOGGER = Logger.getLogger(AsynchronousFormContainer.class);

    /** Vertical space. */
    public static final int VERTICAL_SPACE = 8;

    /** Outer space. */
    public static final int OUTER_SPACE = VERTICAL_SPACE;

    /**
     * The service used to provide the form to the container.
     */
    private final Service<WpsProcessForm> myService;

    /**
     * The form generated by the {@link #myService}.
     */
    private WpsProcessForm myForm;

    /** The button bar. */
    private final LabeledObservableButtonBar myButtonBar;

    /** The status label. */
    private final Label myMessageLabel;

    /**
     * The inner container in which the form is rendered. This uses a stack pane to allow the progress indicator to be displayed
     * while the form is loading, and the form to replace the progress indicator once it is ready.
     */
    private final StackPane myFormArea;

    /**
     * The progress indicator displayed while the form is loading.
     */
    private final ProgressIndicator myProgressIndicator;

    /**
     * Creates a new form container, populated asynchronously using the supplied service. The service is started as a side-effect
     * of the constructor, and the progress indicator is displayed while the service is loading the form.
     *
     * @param pService the service through which the form is loaded.
     * @param pButtonBarSupplier the supplier method used to create the button bar.
     * @param pButtonClickSupplier The consumer method used to handle button bar click operations.
     */
    @SuppressWarnings("PMD.ConstructorCallsOverridableMethod")
    public AsynchronousFormContainer(Service<WpsProcessForm> pService, Supplier<LabeledObservableButtonBar> pButtonBarSupplier,
            Consumer<ButtonData> pButtonClickSupplier)
    {
        myService = pService;
        myService.setOnSucceeded(event -> serviceComplete());
        myService.setOnFailed(event -> serviceFailed());
        myService.onSucceededProperty().addListener((pObservable, pOld, pNew) -> serviceComplete());
        myService.onFailedProperty().addListener((pObservable, pOld, pNew) -> serviceFailed());
        myFormArea = new StackPane();

        myProgressIndicator = new ProgressIndicator();
        myProgressIndicator.setMaxWidth(100);
        myProgressIndicator.setMaxHeight(100);
        myProgressIndicator.visibleProperty().bind(pService.runningProperty());

        myFormArea.getChildren().add(myProgressIndicator);

        setCenter(myFormArea);

        myButtonBar = pButtonBarSupplier.get();
        myButtonBar.addButtonClickListener(pButtonClickSupplier);

        // disable the buttons until the form shows up:
        myButtonBar.disableButtonsProperty().set(true);
        myMessageLabel = new Label();

        setBottom(FXUtilities.newHBox(myMessageLabel, FXUtilities.newHSpacer(), myButtonBar));
        setMargin(getBottom(), new Insets(5, 5, 5, 0));

        myService.restart();
    }

    /**
     * An event handler method (called from the lambda tied to the service) used to add the form.
     */
    protected void serviceComplete()
    {
        myForm = myService.getValue();
        myFormArea.getChildren().add(myForm);

        myButtonBar.disableButtonsProperty().bind(myForm.getValidationGroup().invalidProperty());
    }

    /**
     * An event handler method (called from the lambda tied to the service) used to handle a form service failure.
     */
    protected void serviceFailed()
    {
        if (myService.getException() != null)
        {
            myMessageLabel.setText("An exception occurred while retrieving the form");
            LOGGER.error("An exception occurred while retrieving the form", myService.getException());
        }
    }

    /**
     * Gets the property through which the executing status of the underlying service is tracked.
     *
     * @return the property through which the executing status of the underlying service is tracked.
     */
    public ReadOnlyBooleanProperty serviceExecutingProperty()
    {
        return myService.runningProperty();
    }

    /**
     * Gets the value of the {@link #myForm} field.
     *
     * @return the value stored in the {@link #myForm} field.
     */
    public WpsProcessForm getForm()
    {
        return myForm;
    }
}
